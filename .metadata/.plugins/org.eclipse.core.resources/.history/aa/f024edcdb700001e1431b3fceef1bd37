package screensEtc;

import java.util.ArrayList;

import com.badlogic.gdx.Game;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.utils.ScreenUtils;

public class MenuScreen implements Screen {

	
	GameScreen gameScreen;
	Game game;
	SpriteBatch batch;
	BitmapFont font;
	
	int lInsetX;
	int rInsetX;
	
	ArrayList<String> leftText;
	ArrayList<String> rightText;

	int width;
	int height;

	int highScore;

	public MenuScreen(Game game, int highScore, int width, int height) {
		this.gameScreen = new GameScreen(this);
		this.game = game;
		this.batch = new SpriteBatch();
		this.font = new BitmapFont();

		lInsetX = gameScreen.getBackground().getWidth() / 20;
		rInsetX = gameScreen.getBackground().getWidth() / 2;
		
		leftText = new ArrayList<String>();
		rightText = new ArrayList<String>();
		
		this.width = width;
		this.height = height;

		this.highScore = highScore;
		
		createLeftSideText();

	}

	@Override
	public void show() {
		gameScreen = new GameScreen(this);

	}

	@Override
	public void render(float delta) {

		ScreenUtils.clear(0,0,0,1);
		checkForStartInput();

		processBatch();

	}

	private void processBatch() {
		batch.begin();

//		createRightSideText();
		renderLeftSideText();

		batch.end();

	}

	private void createRightSideText() {

		rightText.add("Controls");
		rightText.add("You start with 3 units.");
		rightText.add("TO DIRECTLY MOVE A UNIT:");
		rightText.add("Hold its number on the number pad,\nand then hold WASD to move it.");
		rightText.add("TO ISSUE A CONTINUOUS ORDER TO A UNIT");
		rightText.add("Hold the letter, then tap its number on the number pad:");
		rightText.add("Q - Harvest gold\nE - Harvest stone\nR - Attack nearest unit");
		rightText.add("T - build simple tower (10 gold, 15 stone; blocks enemies)\nB - build damaging barbs (6 gold, 2 stone; hurts enemies)");
		rightText.add("R - Continuously attack enemies (deals small damage each hit; unit takes damage too and can die!)");
		rightText.add("0 - Buy new unit (100 gold; max of 9)");
		rightText.add("1/2/3 - Move to low/medium/high defensive position");

		
	}

	private void createLeftSideText() {
		
		leftText.add("CASTLE DEFENCE");
		leftText.add("The castle is under attack!");
		leftText.add("Control your units to gather gold and stone, build towers,\nor attack enemies directly.");
		leftText.add("Survive as long as you can, and go for the high score.");
		leftText.add("Good luck!");
		leftText.add("PRESS SPACE TO START");
		leftText.add("High score: "+Integer.toString(highScore));

	}
	
	private void renderLeftSideText() {
		int count = 0;
		while (count < leftText.size()) {
			font.draw(batch, leftText.get(count),lInsetX, gameScreen.getBackground().getHeight()-(50 * count) + 30);
			font.draw(batch, rightText.get(count),rInsetX, gameScreen.getBackground().getHeight()-(50 * count) + 30);
			count++;
		}


//		l1 = "CASTLE DEFENCE";
//		l2 = "The castle is under attack!";
//		l3 = "Control your units to gather gold and stone, build towers,\nor attack enemies directly.";
//		l4 = "Survive as long as you can, and go for the high score.";
//		l5 = "Good luck.";
//		l6 = "You'll need it...";
//		l7 = "PRESS SPACE TO START";
//		l8 = "High Score:";
//		l9 = Integer.toString(gameScreen.getPoints());
//
//		// LEFT: Description
//		font.draw(batch, l1, lInsetX, height - 50);
//		font.draw(batch, l2, lInsetX, height - 100);
//		font.draw(batch, l3, lInsetX, height - 150);
//		font.draw(batch, l4, lInsetX, height - 200);
//		font.draw(batch, l5, lInsetX, height - 250);
//		font.draw(batch, l6, lInsetX, height - 300);
//		font.draw(batch, l7, lInsetX, height - 350);
//		font.draw(batch, l8, lInsetX, height - 450);
//		font.draw(batch, l9, lInsetX+50, height - 500);

	}

	private void checkForStartInput() {

		if (Gdx.input.isKeyJustPressed(Input.Keys.SPACE)) {
			game.setScreen(gameScreen);
		}

	}

	@Override
	public void resize(int width, int height) {
		// TODO Auto-generated method stub

	}

	@Override
	public void pause() {
		// TODO Auto-generated method stub

	}

	@Override
	public void resume() {
		// TODO Auto-generated method stub

	}

	@Override
	public void hide() {
		// TODO Auto-generated method stub

	}

	@Override
	public void dispose() {
		// TODO Auto-generated method stub

	}

	public Game getGame() {
		return game;
	}

	public void setGame(Game game) {
		this.game = game;
	}

}
