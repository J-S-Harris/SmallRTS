package utilityClasses;

import java.util.ArrayList;

import com.mygdx.smallrts.gameElements.PuckRootClass;

import screensEtc.GameScreen;
import screensEtc.MenuScreen;
import towers.Barbs;
import towers.BasicTower;
import towers.Landmine;

public class MenuScreenTextManager {

	MenuScreen menuScreen;
	GameScreen gameScreen;
	ArrayList<String> leftText;
	ArrayList<String> rightText;
	int count;

	PuckRootClass puckRef = new PuckRootClass(1, null);
	BasicTower towerRef = new BasicTower(null);
	Barbs barbsRef = new Barbs(null);
	Landmine landmineRef = new Landmine(null);

	public MenuScreenTextManager(MenuScreen menuScreen) {

		this.menuScreen = menuScreen;
		gameScreen = menuScreen.getGameScreen();
		gatherText();

	}

	public void gatherText() {
		createLeftSideText();
		createRightSideText();

	}

	public void renderLeftText() {
		count = 0;
		while (count < leftText.size()) {
			if ((!leftText.get(count).contains("score:"))) {
				menuScreen.getFont().draw(menuScreen.getBatch(), leftText.get(count), menuScreen.getlInsetX(),
						menuScreen.getGameScreen().getBackground().getHeight() - (50 * count) + 30);
			} else {
				menuScreen.getFontHighScore().draw(menuScreen.getBatch(), leftText.get(count), menuScreen.getlInsetX(),
						menuScreen.getGameScreen().getBackground().getHeight() - (50 * count) + 30);

			}
			count++;
		}
	}

	public void renderRightText() {
		count = 0;
		while (count < rightText.size()) {
			menuScreen.getFont().draw(menuScreen.getBatch(), rightText.get(count), menuScreen.getrInsetX(),
					menuScreen.getGameScreen().getBackground().getHeight() - (50 * count) + 30);
			count++;
		}

	}

	public void createLeftSideText() {

		leftText = new ArrayList<String>();
		leftText.add("UNNAMED CASTLE DEFENCE GAME");
		leftText.add("High score: " + Integer.toString(menuScreen.getHighScore()));
		leftText.add("Monsters are attacking your castle!");
		leftText.add("Protect your citizens!");
		leftText.add("Citizens will die when a monster reaches the castle.");
		leftText.add("The stronger the monster, the more citizens you lose!");
		leftText.add("Help the citizens survive as long as you can, and go for the high score.");
		leftText.add("Direct your units to gather gold and stone, build towers,and attack enemies directly.");
		leftText.add("Hold left control to see inputs at the bottom of the screen");
		leftText.add("");
		leftText.add("PRESS SPACE TO SEE CONTROLS >>>>>");
		leftText.add("");
		leftText.add("V" + menuScreen.getVersionNumber());

	}

	public void createRightSideText() {

		rightText = new ArrayList<String>();
		rightText.add("Controls");
		rightText.add("TO DIRECTLY MOVE A UNIT:");
		rightText.add("TAP its number on the number pad, and then hold WASD to move it.");
		rightText
				.add("TO ISSUE A CONTINUOUS ORDER TO A UNIT: HOLD the letter, then tap its number on the number pad:");
		rightText.add("Q - Harvest gold		||	 E - Harvest stone");
		rightText.add("R - Continuously attack enemies (deals small damage each hit. Your unit takes damage too!)");
		rightText.add("T - build simple tower (" + towerRef.getGoldToMake() + " gold, " + towerRef.getStoneToMake()
				+ " stone; blocks enemies. Sturdy, but deals no damage)");
		rightText.add("B - build damaging barbs (" + barbsRef.getGoldToMake() + " gold, " + barbsRef.getStoneToMake()
				+ " stone; hurts enemies.\nbreaks easily and doesn't block enemies)");
		rightText.add("L - build a landmine(" + landmineRef.getGoldToMake() + " gold, " + landmineRef.getStoneToMake()
				+ " stone; Explodes, large AoE damage.\nExpensive; last-ditch weapon. WARNING: Will kill your units!)");
		rightText.add("U - Upgrades a unit (increases HP + speed; " + gameScreen.getCostToUpgradeUnit()
				+ " gold)\n0 - Buy new unit (\"+menuScreen.getGameScreen().getNewUnitGoldCost()+\" gold; max of 9)");
		rightText.add("1/2/3 - Move to low/medium/high defensive position");
		rightText.add("Escape - Removes the unit from list of units being directly moved");
		rightText.add("PRESS SPACE TO START >>>");
	}

	public ArrayList<String> getLeftText() {
		return leftText;
	}

	public void setLeftText(ArrayList<String> leftText) {
		this.leftText = leftText;
	}

	public ArrayList<String> getRightText() {
		return rightText;
	}

	public void setRightText(ArrayList<String> rightText) {
		this.rightText = rightText;
	}

}
